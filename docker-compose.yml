version: "3.8"

x-common-backend: &microservice
  build:
    context: .

services:
  cart-backend:
    <<: *microservice
    ports:
      - "8001:8001"
    command: ["opentelemetry-instrument", "uvicorn", "cart_backend.main:app", "--host", "0.0.0.0", "--port", "8001"]
    env_file:
      - common.env
      - cart_backend/.env

  cart-service:
    <<: *microservice
    ports:
      - "8003:8003"
    command: ["opentelemetry-instrument", "uvicorn", "cart_service.main:app", "--host", "0.0.0.0", "--port", "8003"]
    env_file:
      - common.env
      - cart_service/.env

  order-service:
    <<: *microservice
    ports:
      - "8002:8002"
    command: ["opentelemetry-instrument", "uvicorn", "order_service.main:app", "--host", "0.0.0.0", "--port", "8002" ]
    env_file:
      - common.env
      - order_service/.env

#  etl-service:
#    <<: *microservice
##    command: ["opentelemetry-instrument", "python", "amqp_airflow_dag/simple_scheduler.py"]
#    command: "opentelemetry-instrument python amqp_airflow_dag/simple_scheduler.py"
#    env_file:
#      - common.env
#      - amqp_airflow_dag/.env
#    depends_on:
#      rabbitmq:
#        condition: service_healthy
#    environment:
#      PYTHONPATH: ./

  warehouse-service:
    <<: *microservice
    command: ["opentelemetry-instrument", "python", "warehouse_service/main.py"]
    env_file:
      - common.env
      - warehouse_service/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      PYTHONPATH: ./


  rabbitmq:
    image: rabbitmq:management
    ports:
      - "15672:15672"  # http
      - "5672:5672"  # amqp
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 3
    env_file:
      - common.env
    command: rabbitmq-server


  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.61.0
    container_name: otel-collector
    restart: always
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "9464:9464"   # Prometheus exporter 2
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP http receiver
      - "55679:55679" # zpages extension
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml

  jaeger:
    image: jaegertracing/all-in-one
    ports:
      - "14250:14250"
      - "16686:16686"

  prometheus:
    image: quay.io/prometheus/prometheus:v2.34.0
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=remote-write-receiver
    volumes:
      - ./prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:9.1.0
    container_name: grafana
#    volumes:
#      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
#      - ./grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "3000:3000"

#  zipkin:
#    image: openzipkin/zipkin
#    ports:
#      - "9411:9411"
